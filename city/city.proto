syntax = "proto3";
package city;



message City {
    // @inject_tag: json:"title",validate:"alphanumunicode,required"
    string title = 1;

    // @inject_tag: json:"name",validate:"alpha,required"
    string name = 2;

    // @inject_tag: json:"province",validate:"alphanum,required"
    string province = 3;
}

message CityFull {
    string id = 1;
    string title = 2;
    string name = 3;
    Province province = 4;
}

message CityBrief {
    string id = 1;
    string title = 2;
    string name = 3;
}

message Province {
    string id = 1;
    string title = 2;
    string name = 3;
}


message RequestDetails {
    // @inject_tag: json:"id",validate:"required"
    string id = 1;
}

message ResponseDetails {
    string id = 1;
    City city = 2;
    string creator = 3;
}

message RequestCreate {
    // @inject_tag: json:"city",validate:"required"
    City city = 1;

    // @inject_tag: json:"-"
    string creator = 2;
}

message ResponseIsExist {
    bool exist = 1;
}

message RequestCheckProvinceHasCityByName {
    string provinceId = 1;
    string cityName = 2;
}

message ResponseCheckProvinceHasCityByName {
    bool has = 1;
}

message RequestList {
    // @inject_tag: json:"count",validate:"number,min=10,required"
    int32 count = 1;

    // @inject_tag: json:"page",validate:"number,min=1,required"
    int32 page = 2;
}

message ResponseList {
    repeated CityFull cities = 1; 
}

message RequestProvinceCitiesList {
    // @inject_tag: json:"provinceId",validate:"alphanum,required"
    string provinceId = 1;
}


message ResponseProvinceCitiesList {
    repeated CityBrief cities = 1;
}




service cityService {
    rpc Create(RequestCreate) returns (ResponseDetails) {}
    rpc isExist(RequestDetails) returns (ResponseIsExist) {}
    rpc checkProvinceHasCityByName(RequestCheckProvinceHasCityByName) returns (ResponseCheckProvinceHasCityByName) {}
    rpc list(RequestList) returns (ResponseList) {}
    rpc provinceCities(RequestProvinceCitiesList) returns (ResponseProvinceCitiesList) {}
}

